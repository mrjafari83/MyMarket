@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using System.Collections.Generic;
@{
    ViewData["Title"] = "Create";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<div class="row">
    <div class="col s12">
        <div class="card">
            <div class="card-content">
                <form class="formValidate" id="formValidate" novalidate="novalidate">
                    <div class="row">
                        <div class="input-field col s12">
                            <select id="categoryId" asp-items="@ViewBag.Categories"></select>
                            <label>دسته بندی ها</label>
                        </div>
                        <div class="input-field col s12">
                            <label for="name" class="">نام کالا*</label>
                            <input id="name" name="name" type="text" data-error=".errorTxt1">
                            <div class="errorTxt1"></div>
                        </div>
                        <div class="input-field col s12">
                            <label for="brand">برند</label>
                            <input id="brand" type="text" name="brand">
                        </div>
                        <div class="input-field col s12">
                            <label for="price">قیمت*</label>
                            <input id="price" type="number" name="price" data-error=".errorTxt2">
                            <div class="errorTxt2"></div>
                        </div>
                        <div class="input-field col s12">
                            <label for="inventory">موجودی*</label>
                            <input id="inventory" type="number" name="inventory" data-error=".errorTxt3">
                            <div class="errorTxt3"></div>
                        </div>
                        <div class="input-field col s12">
                            <label for="shortDescription">توضیحات مختصر*</label>
                            <input id="shortDescription" type="text" name="shortDescription" data-error=".errorTxt4">
                            <div class="errorTxt4"></div>
                        </div>
                        <div class="input-field col s12">
                            <textarea id="description" name="description" data-error=".errorTxt5"></textarea>
                            <div class="errorTxt5"></div>
                        </div>
                        <div class="input-field col s12 file-field">
                            <div class="btn cyan">
                                <span>تصاویر</span>
                                <input multiple type="file" id="images" name="images" data-error=".errorTxt6">
                            </div>
                            <div class="file-path-wrapper">
                                <input class="file-path validate" type="text">
                            </div>
                            <div class="errorTxt6"></div>
                        </div>

                        <div class="input-field col s12">
                            <label for="keywordValue">کلمه کلیدی : </label>
                            <input type="text" id="keywordValue" class="validate" />
                            <a class="btn green waves-effect waves-light right" id="btnCreateKeyword">
                                افزودن
                            </a>
                        </div>
                        <table class="highlight">
                            <thead>
                                <tr>
                                    <th>کلمه کلیدی</th>
                                </tr>
                            </thead>
                            <tbody id="keywordTable">
                            </tbody>
                        </table>
                        <hr />

                        <div class="input-field col s12">
                            <label for="featureDisplay"> نام ویژگی : </label>
                            <input type="text" id="featureDisplay" class="validate" />
                        </div>
                        <div class="input-field col s12">
                            <label for="featureValue"> مقدار ویژگی : </label>
                            <input type="text" id="featureValue" class="validate" />
                            <a class="btn green waves-effect waves-light right" id="btnCreateFeature">
                                افزودن
                            </a>
                        </div>
                        <table class="highlight">
                            <thead>
                                <tr>
                                    <th>نام ویژگی</th>
                                    <th>مقدار ویژگی</th>
                                </tr>
                            </thead>
                            <tbody id="featureTable">
                            </tbody>
                        </table>
                        <hr />
                        <div class="input-field col s12">
                            <label for="colorValue"> رنگ : </label>
                            <input type="text" id="colorValue" class="validate" />
                            <a class="btn green waves-effect waves-light right" id="btnCreateColor">
                                افزودن
                            </a>
                        </div>
                        <div class="input-field col s12">
                            @await Component.InvokeAsync("ColorsInSelectList")
                            <a class="btn green waves-effect waves-light right" id="btnCreateColorByList">
                                افزودن
                            </a>
                        </div>
                        <table class="highlight">
                            <thead>
                                <tr>
                                    <th>رنگ ها</th>
                                </tr>
                            </thead>
                            <tbody id="colorTable">
                            </tbody>
                        </table>
                        <hr />
                        <div class="input-field col s12">
                            <label for="sizeValue"> سایز : </label>
                            <input type="text" id="sizeValue" class="validate" />
                            <a class="btn green waves-effect waves-light right" id="btnCreateSize">
                                افزودن
                            </a>
                        </div>
                        <div class="input-field col s12">
                            @await Component.InvokeAsync("SizesInSelectList")
                            <a class="btn green waves-effect waves-light right" id="btnCreateSizeByList">
                                افزودن
                            </a>
                        </div>
                        <table class="highlight">
                            <thead>
                                <tr>
                                    <th>سایز ها</th>
                                </tr>
                            </thead>
                            <tbody id="sizeTable">
                            </tbody>
                        </table>
                        <hr />
                        <div class="input-field col s12">
                            <button class="btn waves-effect waves-light right submit green" type="submit" name="action">افزودن</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<br />
<br />
<br />


@section scripts
{
    <script src="/ckeditor/ckeditor.js"></script>
    <script src="/ckeditor/adapters/jquery.js"></script>

    <script src="/Admin/assets/extra-libs/prism/prism.js"></script>
    <script src="/Admin/dist/js/pages/forms/jquery.validate.min.js"></script>
    <script>
        $(document).ready(function () {
            $("#formValidate").validate({
                rules: {
                    name: {
                        required: true,
                    },
                    price: {
                        required: true,
                    },
                    inventory: {
                        required: true,
                    },
                    shortDescription: {
                        required: true,
                    },
                    description: {
                        required: true,
                    },
                    images: {
                        required: true,
                    },
                },
                //For custom messages 
                messages: {
                    name: {
                        required: "یک نام انتخاب کنید",
                    },
                    price: {
                        required: "قیمت کالا را وارد کنید",
                    },
                    inventory: {
                        required: "موجودی کالا(در انبار) را وارد کنید",
                    },
                    shortDescription: {
                        required: "توضیحات مختصر را وارد کنید",
                    },
                    description: {
                        required: "توضیحات محصول را وارد کنید",
                    },
                    images: {
                        required: "یک تصویر انتخاب کنید",
                    },
                },
                errorElement: 'div',
                errorPlacement: function (error, element) {
                    var placement = $(element).data('error');
                    if (placement) {
                        $(placement).append(error)
                    } else {
                        error.insertAfter(element);
                    }
                },
                submitHandler: function () {
                    debugger;

                    var formdata = new FormData();
                    formdata.append("Name", $("#name").val());
                    formdata.append("Brand", $("#brand").val());
                    formdata.append("Description", $("#description").val());
                    formdata.append("ShortDescription", $("#shortDescription").val());
                    formdata.append("Inventory", $("#inventory").val());
                    formdata.append("Price", $("#price").val());
                    formdata.append("CategoryId", $("#categoryId").find("option:selected").val());

                    var productImages = document.getElementById("images");
                    if (productImages.files.length > 0) {
                        for (var i = 0; i < productImages.files.length; i++) {
                            formdata.append('Images', productImages.files[i]);
                        }
                    }

                    var Keywords = $('#keywordTable tr').map(function () {
                        return {
                            KeywordValue: $(this.cells[0]).text(),
                        };
                    }).get();
                    $.each(Keywords, function (i, val) {
                        formdata.append('[' + i + '].KeywordValue', val.KeywordValue);
                    });

                    var colors = $('#colorTable tr').map(function () {
                        return {
                            Name: $(this.cells[0]).text(),
                        };
                    }).get();
                    $.each(colors, function (i, val) {
                        formdata.append('[' + i + '].Name', val.Name);
                    });

                    var sizes = $('#sizeTable tr').map(function () {
                        return {
                            SizeValue: $(this.cells[0]).text(),
                        };
                    }).get();
                    $.each(sizes, function (i, val) {
                        formdata.append('[' + i + '].SizeValue', val.SizeValue);
                    });

                    var features = $('#featureTable tr').map(function () {
                        return {
                            Display: $(this.cells[0]).text(),
                            FeatureValue: $(this.cells[1]).text(),
                        };
                    }).get();
                    $.each(features, function (i, val) {
                        formdata.append('[' + i + '].Display', val.Display);
                        formdata.append('[' + i + '].FeatureValue', val.FeatureValue);
                    });

                    $.ajax({
                        type: "POST",
                        processData: false,
                        contentType: false,
                        cache: false,
                        enctype: "multipart/form-data",
                        url: "/Admin/Product/Create",
                        data: formdata,
                        success: function (response) {
                            window.location.href = "/Admin/Product";
                        }
                    });
                }
            });

            //کنترل جدول کلمات کلیدی برای اضافه و حذف نمودن خط به جدول
            $("#btnCreateKeyword").click(function (e) {
                var table = document.getElementById("keywordTable");
                var keyValue = document.getElementById("keywordValue").value;

                if (keyValue !== "") {
                    CreateRow(table, [keyValue], true);
                }

                $("#keywordValue").val("");
            });

            $("#keywordTable").on('click', '.idFeatures', function () {
                $(this).closest('tr').remove();
            });

            //کنترل جدول رنگ ها برای افزودن و حذف نمودن خط به جدول
            $("#btnCreateColor").click(function (e) {
                var table = document.getElementById("colorTable");
                var keyValue = document.getElementById("colorValue").value;

                if (keyValue !== "") {
                    CreateRow(table, [keyValue], true);
                }

                $("#colorValue").val("");
            });

            $("#colorTable").on('click', '.idFeatures', function () {
                $(this).closest('tr').remove();
            });

            //کنترل جدول سایز ها برای افزودن و حذف نمودن خط به جدول
            $("#btnCreateSize").click(function (e) {
                var table = document.getElementById("sizeTable");
                var keyValue = document.getElementById("sizeValue").value;

                if (keyValue !== "") {
                    CreateRow(table, [keyValue], true);
                }

                $("#sizeValue").val("");
            });

            $("#sizeTable").on('click', '.idFeatures', function () {
                $(this).closest('tr').remove();
            });

            //کنترل جدول ویژگی ها برای افزودن و حذف نمودن خط به جدول
            $("#btnCreateFeature").click(function (e) {
                debugger;
                var table = document.getElementById("featureTable");
                var display = document.getElementById("featureDisplay").value;
                var value = document.getElementById("featureValue").value;

                if (value !== "" && display !== "") {
                    CreateRow(table, [display, value], true);
                }

                $("#featureDisplay").val("");
                $("#featureValue").val("");
            });

            $("#featureTable").on('click', '.idFeatures', function () {
                $(this).closest('tr').remove();
            });

            //افزودن رنگ با لیست
            $("#btnCreateColorByList").click(function (e) {
                var colors = document.getElementById("ColorsList").options;
                var table = document.getElementById("colorTable");
                debugger;
                for (var i = 0; i < colors.length; i++) {
                    if (colors[i].selected && !colors[i].disabled) {
                        CreateRow(table, [colors[i].value], true);
                    }
                };
            });

            //افزودن سایر با لیست
            $("#btnCreateSizeByList").click(function (e) {
                var sizes = document.getElementById("SizesList").options;
                var table = document.getElementById("sizeTable");
                debugger;
                for (var i = 0; i < sizes.length; i++) {
                    if (sizes[i].selected && !sizes[i].disabled) {
                        CreateRow(table, [sizes[i].value], true);
                    }
                };
            });

            //متد افزودن خط
            function CreateRow(table, values, withDeleteKey) {
                var newRow = "<tr>";
                for (var i = 0; i < values.length; i++) {
                    newRow += "<td>" + values[i] + "</td>";
                }

                if (withDeleteKey === true) {
                    newRow += '<td><a class="idFeatures btn red waves-effect waves-light right" >حذف</a></td>';
                }

                newRow += "</tr>";
                table.innerHTML += newRow;
            }

            $(function () {
                $('#description').ckeditor();
            });
        });
    </script>
}

